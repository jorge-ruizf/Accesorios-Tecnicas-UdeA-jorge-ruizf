/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package pkg13.loginexamplewithfiles;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableRowSorter;
import logicexample.Repository.AccesorioRepository;
import loginexample.Entities.Accesorio;

/**
 *
 * @author jufeq
 */
public class InternalFrameAccessoriosV2 extends javax.swing.JInternalFrame {

    private ArrayList<Accesorio> lstAccesorios = new ArrayList<>();
    private AccesorioRepository respository;
    private TableRowSorter<ModelAccesoriosTable> tableSorter = new TableRowSorter<>();
    private int actualIndiceTable;


    /**
     * Creates new form InternalFrameAccessoriosV2
     */
    public InternalFrameAccessoriosV2() throws FileNotFoundException, Exception {
        this.actualIndiceTable = -1;
        initComponents();

        this.respository = new AccesorioRepository();
        lstAccesorios = this.respository.leerAccesorios();

        initialComponentsInternalFrameAccessoriosV2();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanelTablev2 = new javax.swing.JScrollPane();
        tblAccesorios = new javax.swing.JTable();
        panelBotonesAcciones = new javax.swing.JPanel();
        btnCrear = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        panelInfoIndividualAccesorio = new javax.swing.JPanel();
        txtCantidad = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        labelCantidad = new javax.swing.JLabel();
        txtMaterial = new javax.swing.JTextField();
        labelMaterial = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);

        tblAccesorios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblAccesorios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAccesoriosMouseClicked(evt);
            }
        });
        scrollPanelTablev2.setViewportView(tblAccesorios);

        btnCrear.setText("Crear");
        btnCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotonesAccionesLayout = new javax.swing.GroupLayout(panelBotonesAcciones);
        panelBotonesAcciones.setLayout(panelBotonesAccionesLayout);
        panelBotonesAccionesLayout.setHorizontalGroup(
            panelBotonesAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesAccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonesAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCrear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBotonesAccionesLayout.setVerticalGroup(
            panelBotonesAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonesAccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCrear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModificar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancelar))
        );

        txtCantidad.setToolTipText("");
        txtCantidad.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        txtNombre.setToolTipText("");
        txtNombre.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        labelNombre.setText("Nombre:");

        labelCantidad.setText("Cantidad:");

        txtMaterial.setToolTipText("");
        txtMaterial.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        labelMaterial.setText("Material:");

        javax.swing.GroupLayout panelInfoIndividualAccesorioLayout = new javax.swing.GroupLayout(panelInfoIndividualAccesorio);
        panelInfoIndividualAccesorio.setLayout(panelInfoIndividualAccesorioLayout);
        panelInfoIndividualAccesorioLayout.setHorizontalGroup(
            panelInfoIndividualAccesorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoIndividualAccesorioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoIndividualAccesorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCantidad, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtNombre, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMaterial, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelInfoIndividualAccesorioLayout.createSequentialGroup()
                        .addGroup(panelInfoIndividualAccesorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNombre)
                            .addComponent(labelCantidad)
                            .addComponent(labelMaterial))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInfoIndividualAccesorioLayout.setVerticalGroup(
            panelInfoIndividualAccesorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoIndividualAccesorioLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(labelNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCantidad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelMaterial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanelTablev2, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelInfoIndividualAccesorio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelBotonesAcciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPanelTablev2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelInfoIndividualAccesorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelBotonesAcciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActionPerformed
        try {
            String nombre = txtNombre.getText().trim();
            String material = txtMaterial.getText().trim();
            String cantidadStr = txtCantidad.getText().trim();

            if (nombre.length() > 30) {
                throw new IllegalArgumentException("El nombre no debe superar los 30 caracteres.");
            }

            if (material.length() > 50) {
                throw new IllegalArgumentException("El material no debe superar los 50 caracteres.");
            }

            int cantidad = Integer.parseInt(cantidadStr);

            if (cantidad < 0) {
                throw new IllegalArgumentException("La cantidad no puede ser negativa.");
            }

            UUID uuid = UUID.randomUUID();
            var accesorio = new Accesorio();

            accesorio.setCodigo(uuid.toString());
            accesorio.setCantidad(cantidad);
            accesorio.setMaterial(material);
            accesorio.setNombre(nombre);

            var accesorioModel = (ModelAccesoriosTable) this.tblAccesorios.getModel();
            accesorioModel.AddAccesorio(accesorio);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número entero válido.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de validación", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado al crear el accesorio.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnCrearActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        try {        
            this.respository.guardarAccesorios(lstAccesorios);
        } catch (Exception ex) {
            Logger.getLogger(InternalFrameAccessoriosV2.class.getName()).log(Level.SEVERE, null, ex);
        }

        initialComponentsInternalFrameAccessoriosV2();
    }//GEN-LAST:event_btnGuardarActionPerformed

    // va a detectar cuando se haga un click dentro de la tabla
    private void tblAccesoriosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAccesoriosMouseClicked
        Accesorio accesorio = seleccionarAccesorioEnTabla();
        this.recargarCamposDeTexto(accesorio.getNombre(), accesorio.getCantidad(), accesorio.getMaterial());
    }//GEN-LAST:event_tblAccesoriosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        try {
            if (actualIndiceTable >= 0 && actualIndiceTable < this.lstAccesorios.size()) {
                var accesorioModel = (ModelAccesoriosTable) this.tblAccesorios.getModel();
                accesorioModel.RemoveAccesorio(actualIndiceTable);
            } else {
                throw new IndexOutOfBoundsException("Debe seleccionar un accesorio válido para eliminar.");
            }
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de selección", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar eliminar el accesorio.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            if (actualIndiceTable >= 0 && actualIndiceTable < this.lstAccesorios.size()) {

                String nombre = txtNombre.getText().trim();
                String strCantidad = txtCantidad.getText().trim();
                String material = txtMaterial.getText().trim();

                // Validaciones
                if (nombre.length() > 30) {
                    throw new IllegalArgumentException("El nombre no puede tener más de 30 caracteres.");
                }
                if (material.length() > 50) {
                    throw new IllegalArgumentException("El material no puede tener más de 50 caracteres.");
                }

                int cantidad;
                try {
                    cantidad = Integer.parseInt(strCantidad);
                    if (cantidad < 0 || cantidad > Integer.MAX_VALUE) {
                        throw new IllegalArgumentException("La cantidad debe ser un número entero positivo válido.");
                    }
                } catch (NumberFormatException e) {
                    throw new IllegalArgumentException("La cantidad debe ser un número entero.");
                }

                // Aplicar modificación
                var accesorioModel = (ModelAccesoriosTable) this.tblAccesorios.getModel();
                accesorioModel.ModificarAccesorio(actualIndiceTable, nombre, cantidad, material);
            } else {
                throw new IndexOutOfBoundsException("Debe seleccionar un accesorio válido para modificar.");
            }
        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de validación", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al modificar el accesorio.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCrear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel labelCantidad;
    private javax.swing.JLabel labelMaterial;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JPanel panelBotonesAcciones;
    private javax.swing.JPanel panelInfoIndividualAccesorio;
    private javax.swing.JScrollPane scrollPanelTablev2;
    private javax.swing.JTable tblAccesorios;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtMaterial;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void initialComponentsInternalFrameAccessoriosV2() {
        var defaultModel = new ModelAccesoriosTable(this.lstAccesorios);

        tableSorter = new TableRowSorter<>(defaultModel);

        this.tblAccesorios.setRowSorter(tableSorter);
        this.tblAccesorios.setModel(defaultModel);
    }
    
    public Accesorio seleccionarAccesorioEnTabla(){
        actualIndiceTable = tblAccesorios.getSelectedRow();
        Accesorio accesorio = this.lstAccesorios.get(actualIndiceTable);
        return accesorio;
    }
    
    public void recargarCamposDeTexto(String nombre, int cantidad, String material){
        txtNombre.setText(nombre);
        txtCantidad.setText( String.valueOf(cantidad) );
        txtMaterial.setText(material);
    }
    
}
